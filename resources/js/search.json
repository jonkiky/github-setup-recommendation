[[{"l":"Home"},{"l":"GitHub Setup and Best Practices Documentation"},{"l":"Introduction","p":["Welcome to the GitHub Setup and Best Practices Documentation. This guide is tailored to software developers aiming to establish a robust, secure, and efficient GitHub repository setup. The documentation includes actionable recommendations and workflows to ensure your repository adheres to high standards of code quality, security, and accessibility compliance. Whether you are creating a new repository or enhancing an existing one, this guide will serve as a comprehensive resource."]},{"l":"Objectives","p":["The documentation aims to:","Outline essential GitHub branch rules to streamline collaboration and protect the integrity of your codebase.","Provide methods to monitor and mitigate security vulnerabilities.","Introduce secret protection mechanisms to safeguard sensitive information.","Offer templates and workflows for PR comments, code style, testing, and quality control.","Ensure compliance with accessibility standards (508 compliance).","Implement automated checks for code security and quality."]},{"l":"Key Topics"},{"l":"1. GitHub Branch Rules","p":["Establish branch protection rules to prevent unauthorized changes.","Enforce PR reviews, status checks, and commit message guidelines.","Require linear history and restrict force pushes to critical branches."]},{"l":"2. Monitoring Security Vulnerabilities","p":["Enable GitHub’s Dependabot alerts to track and resolve dependency vulnerabilities.","Integrate third-party tools for real-time vulnerability monitoring."]},{"l":"3. Secret Protection","p":["Utilize GitHub’s Secret Scanning to detect and remediate leaked secrets.","Set up encrypted GitHub Actions secrets for workflows."]},{"l":"4. PR Comment Template","p":["Define a standard Pull Request (PR) comment template to ensure consistent and thorough reviews.","Include sections for code functionality, readability, tests, and documentation."]},{"l":"5. 508 Compliance Checker Workflow","p":["Create a GitHub Actions workflow to automate accessibility checks.","Identify and address accessibility issues to maintain compliance with the 508 standards."]},{"l":"6. Code Style Enforcement","p":["Use linters and formatters (e.g., ESLint, Prettier) for consistent code style.","Enforce style rules via pre-commit hooks and CI workflows."]},{"l":"7. Unit Testing","p":["Define a standard for writing and organizing unit tests.","Automate test execution in CI pipelines to catch regressions early."]},{"l":"8. Code Quality Control","p":["Leverage tools like SonarQube or CodeClimate for code analysis.","Set up dashboards to monitor maintainability, complexity, and coverage metrics."]},{"l":"9. Code Security Control","p":["Integrate static application security testing (SAST) tools to identify vulnerabilities in the code.","Implement runtime security measures for enhanced protection."]},{"l":"Getting Started","p":["Developers should follow the step-by-step instructions provided in each section to configure their GitHub repository. The recommendations are designed to integrate seamlessly into your workflow, enhancing the development process while safeguarding your codebase.","For any questions or additional support, please refer to the FAQ section or contact the repository maintainers.","Let’s build a secure, high-quality, and compliant codebase together!"]}],[{"l":"Code Quality Control"},{"l":"Use Codacy for Code Quality Control","p":["Codacy is an automated code quality, security, and coverage analysis tool that helps developers identify issues, enforce coding standards, and maintain high-quality code by integrating seamlessly into CI/CD workflows."]},{"i":"step-1-sign-up-for-codacy","l":"Step 1: Sign Up for Codacy","p":["Visit Codacy and sign up using your GitHub account.","Authorize Codacy to access your GitHub repositories."]},{"i":"step-2-add-a-repository-to-codacy","l":"Step 2: Add a Repository to Codacy","p":["After logging into Codacy, go to the Projects Dashboard.","Click Add repository and select your GitHub repository.","Grant Codacy access to the selected repository by installing the Codacy GitHub App if prompted."]},{"i":"step-3-configure-codacy","l":"Step 3: Configure Codacy"},{"i":"set-up-analysis-configuration","l":"Set Up Analysis Configuration:","p":["Navigate to your project on Codacy.","Use the Settings tab to customize coding standards, tools, and patterns to fit your project."]},{"i":"enable-github-integration","l":"Enable GitHub Integration:","p":["Under Settings > Integrations, enable GitHub integration to display analysis results directly in pull requests."]},{"i":"step-4-add-codacy-to-your-cicd-pipeline-optional","l":"Step 4: Add Codacy to Your CI/CD Pipeline (Optional)"},{"i":"generate-a-codacy-token","l":"Generate a Codacy Token:","p":["Go to Account Settings > API Tokens and generate a personal token."]},{"i":"configure-cicd","l":"Configure CI/CD:","p":["Add the token to your CI/CD environment variables as CODACY_PROJECT_TOKEN.","Integrate the Codacy analysis script into your CI/CD pipeline (e.g., using the Codacy CLI or a CI plugin)."]},{"i":"step-5-use-codacy-insights","l":"Step 5: Use Codacy Insights"},{"i":"view-reports","l":"View Reports:","p":["Open Codacy to review code quality reports and metrics.","Analyze issues, trends, and coverage."]},{"i":"monitor-pull-requests","l":"Monitor Pull Requests:","p":["Codacy will automatically analyze your code on pull requests and display results as comments or checks on GitHub."]},{"l":"Notes","p":["Codacy works with multiple languages and integrates with GitHub Actions, Travis CI, Jenkins, and more.","You can use Codacy for free for public repositories, while private repositories require a subscription.","For detailed documentation, visit the Codacy Docs."]}],[{"l":"Code Security Control"},{"l":"Use Snyk for Code Security Control","p":["Snyk is a developer-friendly security platform that identifies and fixes vulnerabilities in code, open-source dependencies, containers, and infrastructure as code, seamlessly integrating into CI/CD workflows and development tools."]},{"i":"step-1-sign-up-for-snyk","l":"Step 1: Sign Up for Snyk","p":["Visit Snyk and sign up using your GitHub account.","Authorize Snyk to access your GitHub repositories."]},{"i":"step-2-add-a-github-repository-to-snyk","l":"Step 2: Add a GitHub Repository to Snyk","p":["After logging into Snyk, go to the Dashboard.","Click Add Project.","Select your GitHub repository from the list of available repositories.","Grant Snyk access to the repository by installing the Snyk GitHub App if prompted."]},{"i":"step-3-analyze-your-repository","l":"Step 3: Analyze Your Repository","p":["Once added, Snyk will automatically scan your repository for vulnerabilities in:","Dependencies (e.g., package.json, requirements.txt, etc.).","Docker containers (if applicable).","Infrastructure as code (IaC) files (e.g., Terraform, Kubernetes).","View detailed vulnerability reports in the Snyk Dashboard."]},{"i":"step-4-fix-vulnerabilities","l":"Step 4: Fix Vulnerabilities"},{"i":"automatic-fix-prs","l":"Automatic Fix PRs:","p":["Snyk can automatically create pull requests (PRs) to fix vulnerabilities in your dependencies.","To enable this, go to the repository's Snyk project settings and enable Fix PRs."]},{"i":"manual-fix","l":"Manual Fix:","p":["For vulnerabilities without automatic fixes, follow the suggested remediation steps in the Snyk Dashboard."]},{"i":"step-5-update-test--automated-pull-request-frequency","l":"Step 5: Update Test & Automated Pull Request Frequency","p":["Log in to Snyk.","Navigate to the Dashboard and select the project for which you want to update settings.","Click on the Settings tab in the project's menu.. Locate the Testing frequency section.","Choose the frequency at which Snyk tests your dependencies for vulnerabilities:","Test Weekly: Tests will run every week.","Test Never: Never Test.","Save your changes to apply the new frequency."]},{"i":"step-5-monitor-vulnerabilities-over-time","l":"Step 5: Monitor Vulnerabilities Over Time","p":["Snyk continuously monitors your repositories for new vulnerabilities.","Notifications and alerts will appear in your email or GitHub issues if new vulnerabilities are discovered."]},{"i":"step-7-customize-settings","l":"Step 7: Customize Settings"},{"i":"policy-management","l":"Policy Management:","p":["Define security thresholds for blocking builds or creating PRs."]},{"i":"ignore-rules","l":"Ignore Rules:","p":["Temporarily ignore specific vulnerabilities if necessary, with a defined expiration period."]},{"l":"Notes","p":["Snyk supports multiple languages and environments, including JavaScript, Python, Java, Docker, and Terraform.","Public repositories are supported for free, while private repositories require a subscription.","For more details, visit the Snyk Documentation.","Using Snyk with GitHub ensures your code is secure and free from known vulnerabilities throughout the development lifecycle."]}],[{"l":"508 Compliance","p":["We use the eslint-plugin-jsx-a11y to ensure 508 compliance in our projects. To use this plugin, you need to install ESLint and configure it to include the jsx-a11y plugin. This guide will help you configure and use eslint-plugin-jsx-a11y to improve the accessibility of your React applications."]},{"i":"step-1-install-the-plugin","l":"Step 1: Install the Plugin","p":["To get started, install the plugin using either npm or yarn:"]},{"i":"step-2-configure-eslint","l":"Step 2: Configure ESLint","p":["Add eslint-plugin-jsx-a11y to your .eslintrc.json configuration file:","Once the eslint-plugin-jsx-a11y is added, we can use a GitHub Action to trigger it during the pull request (PR) process.","Below is an example GitHub Action workflow:"]},{"l":"How the Plugin Works","p":["The eslint-plugin-jsx-a11y plugin analyzes your JSX code for accessibility issues.","It enforces various accessibility rules to ensure compliance with the 508 standards.","When integrated with GitHub Actions, the linter runs automatically during the PR process.","Any accessibility issues detected by the plugin will be highlighted, allowing developers to address them before merging code into the main branch."]}],[{"i":"code-styling-eslint","l":"Code Styling (ESlint)"},{"l":"Maintaining Consistent Code Styling with ESLint","p":["When working on a shared codebase with multiple developers, maintaining consistent code formatting and styling can be challenging. Inconsistent styling can cause inefficiencies, merge conflicts, and reduced code readability."]},{"l":"Solution","p":["To ensure consistent styling across your codebase, you can use ESLint to enforce coding standards and integrate it with Prettier for detailed formatting rules. By automating code checks using GitHub Actions, you can enforce these standards at the pull request (PR) level, ensuring contributions are compliant before merging."]},{"l":"How to Use ESLint with GitHub Actions"},{"i":"step-1-install-eslint-v8","l":"Step 1: Install ESLint V8","p":["Install ESLint as a development dependency:"]},{"i":"step-2-initialize-eslint","l":"Step 2: Initialize ESLint","p":["Set up an ESLint configuration file by running:","You will be prompted to answer several questions:","The purpose of ESLint (e.g., check syntax, find problems, enforce code style). Your module system preference (CommonJS or ES Modules). Your framework (e.g., React, Vue, etc.). Whether you're using TypeScript. Your preferred configuration format (JavaScript, JSON, or YAML). After completing the setup, an .eslintrc file will be created in your project."]},{"i":"step-3-install-prettier","l":"Step 3: Install Prettier","p":["Install Prettier as a development dependency:"]},{"i":"step-4-integrate-eslint-and-prettier","l":"Step 4: Integrate ESLint and Prettier","p":["Install additional plugins to integrate ESLint with Prettier:","eslint-config-prettier: Disables ESLint rules that conflict with Prettier.","eslint-plugin-prettier: Allows Prettier to run as an ESLint rule, reporting formatting issues directly in ESLint."]},{"i":"step-5-update-eslint-configuration","l":"Step 5: Update ESLint Configuration","p":["Modify your .eslintrc.js file to include Prettier integration. Below is an example configuration:"]},{"i":"step-7-test-the-setup","l":"Step 7: Test the Setup","p":["Run ESLint to verify your configuration:","To automatically fix formatting issues, use:","By following these steps, you'll have a fully configured ESLint and Prettier setup, ensuring consistent code formatting and styling across your project."]},{"l":"2. Add a Linting Script to Your Project","p":["Add a script to your package.json file to define the linting process:","This script enforces strict linting rules and allows no warnings. Test it locally by running:"]},{"l":"3. Create a GitHub Action for Linting","p":["Automate the linting process by creating a GitHub Action. Add a workflow file at .github/workflows/lint.yml with the following content:"]},{"l":"4. Test the GitHub Action","p":["Open a new pull request to test the linting workflow. GitHub Actions will run the linting script and block merging if any linting errors are detected."]}],[{"l":"Unit Test"}],[{"l":"Branch Rules"},{"l":"Released Tag Protection","p":["A safeguard mechanism that ensures released tags remain immutable after being created. Once a tag is marked as released, it cannot be recreated, deleted, or modified, preserving the integrity and consistency of versioned releases.","In Branch Rules, enable :","Restrict creations","Block force pushes","See example: https://github.com/jonkiky/github-setup-recommendation/settings/rules/3233309"]},{"l":"Development Branch Protection","p":["Development Branch Protection enforces secure workflows by restricting branch creation/deletion, requiring pull requests with approvals, status checks, CodeQL scanning, blocking force pushes, and AI review via Copilot.","In Branch Rules, enable :","Restrict branch creations","Restrict branch deletions","Require a pull request before merging","Require at least 1 approval for pull requests","Block force pushes","Require status checks to pass before merging","Require CodeQL code scanning results","Automatically request pull request review from GitHub Copilot","See example: https://github.com/jonkiky/github-setup-recommendation/settings/rules/3233346"]},{"l":"Instructions for Creating a Branch or Tag Ruleset on GitHub","p":["Follow these steps to create a branch or tag ruleset in your GitHub repository:"]},{"i":"step-1-access-repository-settings","l":"Step 1: Access Repository Settings","p":["Go to your GitHub repository.","Click on the Settings tab at the top of the repository page."]},{"i":"step-2-open-rulesets","l":"Step 2: Open Rulesets","p":["Scroll down to the Code and automation section.","Click on Rulesets to manage branch and tag rulesets."]},{"i":"step-3-create-a-new-ruleset","l":"Step 3: Create a New Ruleset","p":["Click the New ruleset button.","In the dialog window:","Enter a name for the ruleset in the Name field.","Choose whether the ruleset applies to Branches or Tags."]},{"i":"step-4-configure-ruleset-as-needed","l":"Step 4: Configure Ruleset as needed"},{"i":"step-6-save-the-ruleset","l":"Step 6: Save the Ruleset","p":["Click the Create or Save ruleset button to finalize your settings."]},{"i":"step-7-manage-and-test-the-ruleset","l":"Step 7: Manage and Test the Ruleset","p":["Perform actions such as pushing commits or merging pull requests to verify the ruleset’s enforcement.","To make adjustments, return to the Rulesets section in the repository settings."]}],[{"l":"Monitoring vulnerabilities"},{"l":"Enabling Dependabot Alerts on GitHub","p":["Dependabot alerts notify you about vulnerabilities in the dependencies used by your repository and suggest ways to resolve them. Follow these steps to enable Dependabot alerts in your GitHub repository."]},{"l":"Steps to Enable Dependabot Alerts","p":["Navigate to Your Repository:","Go to your GitHub repository on GitHub.","Access the Repository Settings:","Click on the Settings tab in the repository's navigation bar.","Open the Security and Analysis Section:","In the left sidebar, scroll down to Security.","Under Security settings, click on Code security and analysis.","Enable Dependabot Alerts:","Locate the Dependabot alerts option.","If the feature is not already enabled, click Enable.","Optional - Enable Dependabot Security Updates:","If you want Dependabot to automatically generate pull requests to fix vulnerabilities, enable Dependabot security updates as well.","Save Changes:","If prompted, save your changes to confirm."]}],[{"l":"PR Comment Template"},{"l":"Setting Up a PR Comment Template in GitHub","p":["GitHub allows you to define templates for pull request descriptions, but for comment templates, you'll need to provide a reusable format for reviewers to use during the review process."]},{"i":"step-1-create-a-markdown-file-for-the-template","l":"Step 1: Create a Markdown File for the Template","p":["Navigate to Your Repository:","Open your repository on GitHub.","Go to the .github Directory:","If it doesn’t exist, create a new directory named .github in the root of your repository.","Create a New File:","Inside the .github directory, create a file named PR_COMMENT_TEMPLATE.md.","Add the Template Content:","Copy and paste the following structure into the file:"]},{"i":"step-2-save-the-template-in-a-central-location","l":"Step 2: Save the Template in a Central Location","p":["Save the file and commit it to your repository. You can reference this template in your CONTRIBUTING.md file or team documentation."]}],[{"l":"Secret Protection"},{"l":"Enabling Secret Scanning on GitHub","p":["Secret scanning helps protect sensitive information, such as API keys and access tokens, from being accidentally committed to your repository. Follow the steps below to enable secret scanning in your GitHub repository."]},{"l":"Steps to Enable Secret Scanning","p":["Access the Repository Settings:","Click on the Settings tab in the repository's navigation bar.","Enable Secret Scanning:","For more details, visit GitHub's Secret Scanning documentation.","Go to your GitHub repository on GitHub.","If prompted, save your changes to confirm.","If the feature is not already enabled, click Enable.","If you see the option for Push Protection, click Enable Push Protection to further secure your repository.","In the left sidebar, scroll down to Security.","Locate the Secret scanning option.","Navigate to Your Repository:","Open the Security and Analysis Section:","Optional - Enable Push Protection:","Push protection prevents commits containing detected secrets from being pushed to the repository.","Save Changes:","Under Security settings, click on Code security and analysis."]}]]