[[{"l":"Home","p":["GitHub Setup Recommendation streamlines development by configuring repositories, branch protections, code reviews, CI/CD integration, contribution guidelines, and automation with GitHub Actions, enhancing collaboration, code quality, and project management efficiency."]}],[{"l":"About Us","p":["GitHub Setup Recommendation streamlines development by configuring repositories, branch protections, code reviews, CI/CD integration, contribution guidelines, and automation with GitHub Actions, enhancing collaboration, code quality, and project management efficiency."]}],[{"l":"Branch Rules"},{"l":"Released Tag Protection","p":["A safeguard mechanism that ensures released tags remain immutable after being created. Once a tag is marked as released, it cannot be recreated, deleted, or modified, preserving the integrity and consistency of versioned releases.","In Branch Rules, enable :","Restrict creations","Block force pushes","See example: https://github.com/jonkiky/github-setup-recommendation/settings/rules/3233309"]},{"l":"Development Branch Protection","p":["Development Branch Protection enforces secure workflows by restricting branch creation/deletion, requiring pull requests with approvals, status checks, CodeQL scanning, blocking force pushes, and AI review via Copilot.","In Branch Rules, enable :","Restrict branch creations","Restrict branch deletions","Require a pull request before merging","Require at least 1 approval for pull requests","Block force pushes","Require status checks to pass before merging","Require CodeQL code scanning results","Automatically request pull request review from GitHub Copilot","See example: https://github.com/jonkiky/github-setup-recommendation/settings/rules/3233346"]},{"l":"Instructions for Creating a Branch or Tag Ruleset on GitHub","p":["Follow these steps to create a branch or tag ruleset in your GitHub repository:"]},{"i":"step-1-access-repository-settings","l":"Step 1: Access Repository Settings","p":["Go to your GitHub repository.","Click on the Settings tab at the top of the repository page."]},{"i":"step-2-open-rulesets","l":"Step 2: Open Rulesets","p":["Scroll down to the Code and automation section.","Click on Rulesets to manage branch and tag rulesets."]},{"i":"step-3-create-a-new-ruleset","l":"Step 3: Create a New Ruleset","p":["Click the New ruleset button.","In the dialog window:","Enter a name for the ruleset in the Name field.","Choose whether the ruleset applies to Branches or Tags."]},{"i":"step-4-configure-ruleset-as-needed","l":"Step 4: Configure Ruleset as needed"},{"i":"step-6-save-the-ruleset","l":"Step 6: Save the Ruleset","p":["Click the Create or Save ruleset button to finalize your settings."]},{"i":"step-7-manage-and-test-the-ruleset","l":"Step 7: Manage and Test the Ruleset","p":["Perform actions such as pushing commits or merging pull requests to verify the ruleset’s enforcement.","To make adjustments, return to the Rulesets section in the repository settings."]}],[{"l":"Enabling Dependabot Alerts on GitHub","p":["Dependabot alerts notify you about vulnerabilities in the dependencies used by your repository and suggest ways to resolve them. Follow these steps to enable Dependabot alerts in your GitHub repository."]},{"l":"Prerequisites","p":["You must have admin permissions for the repository.","The repository must have a dependency manifest or lock file (e.g., package.json, Gemfile.lock, requirements.txt)."]},{"l":"Steps to Enable Dependabot Alerts","p":["Navigate to Your Repository:","Go to your GitHub repository on GitHub.","Access the Repository Settings:","Click on the Settings tab in the repository's navigation bar.","Open the Security and Analysis Section:","In the left sidebar, scroll down to Security.","Under Security settings, click on Code security and analysis.","Enable Dependabot Alerts:","Locate the Dependabot alerts option.","If the feature is not already enabled, click Enable.","Optional - Enable Dependabot Security Updates:","If you want Dependabot to automatically generate pull requests to fix vulnerabilities, enable Dependabot security updates as well.","Save Changes:","If prompted, save your changes to confirm."]},{"l":"Verifying Dependabot Alerts are Enabled","p":["Return to the Settings page and navigate to Code security and analysis.","Ensure that the Dependabot alerts option is marked as Enabled."]},{"l":"Viewing and Resolving Dependabot Alerts","p":["Navigate to the Security Tab:","Click on the Security tab in your repository.","Access Dependabot Alerts:","Under the Security page, select Dependabot alerts.","Review the list of detected vulnerabilities.","Resolve Alerts:","Click on an alert to view more details.","Follow the provided remediati"]}],[{"l":"Enabling Secret Scanning on GitHub","p":["Secret scanning helps protect sensitive information, such as API keys and access tokens, from being accidentally committed to your repository. Follow the steps below to enable secret scanning in your GitHub repository."]},{"l":"Prerequisites","p":["You must have admin permissions for the repository.","Your repository must belong to a GitHub organization that has GitHub Advanced Security enabled."]},{"l":"Steps to Enable Secret Scanning","p":["Access the Repository Settings:","Click on the Settings tab in the repository's navigation bar.","Enable Secret Scanning:","For more details, visit GitHub's Secret Scanning documentation.","Go to your GitHub repository on GitHub.","If prompted, save your changes to confirm.","If the feature is not already enabled, click Enable.","If you see the option for Push Protection, click Enable Push Protection to further secure your repository.","In the left sidebar, scroll down to Security.","Locate the Secret scanning option.","Navigate to Your Repository:","Open the Security and Analysis Section:","Optional - Enable Push Protection:","Push protection prevents commits containing detected secrets from being pushed to the repository.","Save Changes:","Under Security settings, click on Code security and analysis."]}],[{"l":"Setting Up a PR Comment Template in GitHub","p":["GitHub allows you to define templates for pull request descriptions, but for comment templates, you'll need to provide a reusable format for reviewers to use during the review process."]},{"i":"step-1-create-a-markdown-file-for-the-template","l":"Step 1: Create a Markdown File for the Template","p":["Navigate to Your Repository:","Open your repository on GitHub.","Go to the .github Directory:","If it doesn’t exist, create a new directory named .github in the root of your repository.","Create a New File:","Inside the .github directory, create a file named PR_COMMENT_TEMPLATE.md.","Add the Template Content:","Copy and paste the following structure into the file:"]},{"i":"step-2-save-the-template-in-a-central-location","l":"Step 2: Save the Template in a Central Location","p":["Save the file and commit it to your repository. You can reference this template in your CONTRIBUTING.md file or team documentation."]}]]